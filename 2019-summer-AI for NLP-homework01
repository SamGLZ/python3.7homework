




基础理论部分
0. Can you come up out 3 sceneraies which use AI methods?
Ans: {AlphaGo, Robot-driven Vehicles and some Reservation System with AI}
1. How do we use Github; Why do we use Jupyter and Pycharm;
Ans: {We use Github as a code storage or a code cloud which everyone can share and comment. Jupyter can run python code and markdown code in the same time, so it’s clear for demonstration. However, Pycharm is a tool for real project developing. The best way we use these two tools is that Jupyter for lectures and Pycharm for practice.}
2. What's the Probability Model?
Ans: According to the probability of a word and the word next to it, calculating the probability that the whole sentence is correct
3. Can you came up with some sceneraies at which we could use Probability Model?
Ans: In speech recognition, the Probability Model would be used to identify the most correct sentence.
4. Why do we use probability and what's the difficult points for programming based on parsing and pattn match?
Ans: Because it’s hard for human or computer to obtain the best arrangement of words for a meaningful sentence in common enumeration method. Probability of words presenting can narrow down the scale of combination. The difficulty of using parsing and pattn match is similar. The grammar in human language is various and it’s hard to list them all.
5. What's the Language Model;
Ans: For every x, which x is a sentence, in function f(x), the result would be a number between 0 and 1 which means the probability of x to be a meaningful sentence.
6. Can you came up with some sceneraies at which we could use Language Model?
Ans: A Robot for communication during games
7. What's the 1-gram language model;
Ans:
8. What's the disadvantages and advantages of 1-gram language model;¶
Ans:
9. What't the 2-gram models;
Ans:


编程实践部分
# -*- coding: utf-8 -*-
import random
import sys
sys.setrecursionlimit(100000000)
question = """
问题 => 打招呼 自己 询问 业务相关 结尾
自己 => 我叫 名字 ,
名字 => 姓 名
姓 => 陈 | 李 | 张 | 王 | 黄
名 => 一 | 二 | 三 | 四 | 五
打招呼 => 你好， | 您好，
询问 => 您想 | 您是要
业务相关 => 催 报告_1 | 推荐 项目
报告_1  => 流水号为 数字 号报告
数字 => 单个数字 | 数字 单个数字
单个数字 => 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
项目 => 心脏优选 | 免疫优选 | 神经优选 | 内分泌优选
结尾 => 吗？"""

def create_grammar(grammar_str, split = "=>", line_split = "\n"):
    grammar = {}
    for line in grammar_str.split(line_split):
        if not line.strip():
            continue
        exp, stmt = line.split(split)
        grammar[exp.strip()] = [s.split() for s in stmt.split('|')]
    return grammar

def generate(gram, target):
    try:
        if target not in gram:
            return target

        expaned = [generate(gram, t) for t in random.choice(gram[target])]
        return ''.join([e for e in expaned])
    except RecursionError:
        return None

def generate_n(a, b, c):
    for i in range(c):
        print(generate(gram=a, target=b))
