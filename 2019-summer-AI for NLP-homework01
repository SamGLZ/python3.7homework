Jupyter Notebook
Artificial-Intelligence-For-NLP

In [259]:

simple_grammar = """
sentence => noun_phrase verb_phrase
noun_phrase => Article Adj* noun
Adj* => null | Adj Adj*
verb_phrase => verb noun_phrase
Article => 一个 | 这个
noun => 女人 | 篮球 | 桌子 | 小猫
verb => 看着 | 坐在 | 听着 | 看见
Adj => 蓝色的 | 好看的 | 小小的"""
In [237]:

simple_number = """
number = number number | single_number
single_number = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0"""
simple_number = """
number = number number | single_number
single_number = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0"""
In [3]:

import random
In [4]:

def adj(): return random.choice('蓝色的 | 好看的 | 小小的'.split('|'))
In [26]:

def adj_star(): return random.choice([None, adj() + adj()])
In [140]:

adj_grammar = '''
Adj* => null | Adj Adj*
Adj => 蓝色的 | 好看的 | 小小的
'''
In [52]:

#
#grammar = {}
In [363]:

def creat_grammar(grammar_str, split = '=>', line_split = '\n'):
    grammar = {}
    for line in grammar_str.split(line_split):
        if not line.strip(): continue
        exp, stmt = line.split(split)
        grammar[exp.strip()] = [s.split() for s in stmt.split('|')]
    return grammar
In [142]:

grammar['Adj*']
Out[142]:
[['null'], ['Adj', 'Adj*']]
In [168]:

#def generate(gram, target):
#    if target in gram: 
#        new_expanded = random.choice(gram[target])
#        return ''.join(generate(gram,t) for t in new_expanded)
#    else:
#        return target
In [381]:

choice = random.choice
​
def generate(gram, target):
    if target not in gram: return target
    
    expaned = [generate(gram,t) for t in choice(gram[target])]
    return ''.join([e if e != "/n" else "\n" for e in expaned if e != 'null'])
In [491]:

generate(gram = grammar, target = 'Adj*')
Out[491]:
'小小的好看的'
In [287]:

example_grammar = creat_grammar(simple_grammar)
In [288]:

example_grammar
Out[288]:
{'sentence': [['noun_phrase', 'verb_phrase']],
 'noun_phrase': [['Article', 'Adj*', 'noun']],
 'Adj*': [['null'], ['Adj', 'Adj*']],
 'verb_phrase': [['verb', 'noun_phrase']],
 'Article': [['一个'], ['这个']],
 'noun': [['女人'], ['篮球'], ['桌子'], ['小猫']],
 'verb': [['看着'], ['坐在'], ['听着'], ['看见']],
 'Adj': [['蓝色的'], ['好看的'], ['小小的']]}
In [322]:

generate(gram = example_grammar, target = 'sentence')
generate(gram = example_grammar, target = 'sentence')
Out[322]:
'这个篮球听着这个好看的女人'
In [323]:

#在西部世界里，一个”人类“的语言可以定义为：

human = """
human = 自己 寻找 活动
自己 = 我 | 俺 | 我们 
寻找 = 找找 | 想找点 
活动 = 乐子 | 玩的
"""


#一个“接待员”的语言可以定义为

host = """
host = 寒暄 报数 询问 业务相关 结尾 
报数 = 我是 数字 号 ,
数字 = 单个数字 | 数字 单个数字 
单个数字 = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 
寒暄 = 称谓 打招呼 | 打招呼
称谓 = 人称 ,
人称 = 先生 | 女士 | 小朋友
打招呼 = 你好 | 您好 
询问 = 请问你要 | 您需要
业务相关 = 玩玩 具体业务
玩玩 = null
具体业务 = 喝酒 | 打牌 | 打猎 | 赌博
结尾 = 吗？
"""
#在西部世界里，一个”人类“的语言可以定义为：
​
human = """
human = 自己 寻找 活动
自己 = 我 | 俺 | 我们 
寻找 = 找找 | 想找点 
活动 = 乐子 | 玩的
"""
​
​
#一个“接待员”的语言可以定义为
​
host = """
host = 寒暄 报数 询问 业务相关 结尾 
报数 = 我是 数字 号 ,
数字 = 单个数字 | 数字 单个数字 
单个数字 = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 
寒暄 = 称谓 打招呼 | 打招呼
称谓 = 人称 ,
人称 = 先生 | 女士 | 小朋友
打招呼 = 你好 | 您好 
询问 = 请问你要 | 您需要
业务相关 = 玩玩 具体业务
玩玩 = null
具体业务 = 喝酒 | 打牌 | 打猎 | 赌博
结尾 = 吗？
"""
In [492]:

generate(gram = creat_grammar(human, split = '='), target = 'human')
generate(gram = creat_grammar(human, split = '='), target = 'human')
Out[492]:
'俺找找乐子'
In [517]:

)
for i in range(20):
    print(generate(gram = creat_grammar(host, split = '='), target = 'host'))
您好我是834号,请问你要喝酒吗？
先生,你好我是1737887号,您需要赌博吗？
先生,你好我是33号,您需要赌博吗？
你好我是1号,请问你要打牌吗？
你好我是718253号,您需要打猎吗？
小朋友,您好我是88号,您需要喝酒吗？
您好我是625号,请问你要打牌吗？
您好我是876号,您需要打牌吗？
您好我是31号,请问你要打猎吗？
女士,您好我是9号,请问你要赌博吗？
女士,你好我是53792号,请问你要赌博吗？
先生,您好我是62号,您需要打猎吗？
您好我是3号,您需要赌博吗？
你好我是1号,请问你要打牌吗？
你好我是7号,您需要喝酒吗？
你好我是49985865号,您需要赌博吗？
先生,你好我是8号,您需要喝酒吗？
你好我是91号,您需要赌博吗？
小朋友,您好我是7号,您需要打牌吗？
你好我是65号,您需要赌博吗？
In [384]:

programming = """
stmte => if_exp | while | assignment
assignment => var = var
if_exp => if ( var ) { /n stmte }
while => while ( var ) { /n stmte }
var => chars number
chars => char | char char*
char => a | b | c | d | e
number => 1 | 2 | 3
"""
In [391]:

generate(gram = creat_grammar(programming, split = '=>'), target = 'stmte')
Out[391]:
'echar*2=bchar*1'
In [ ]:

 -*- coding: utf-8 -*-
In [536]:

r
filename = r'C:\Users\49997\Desktop\train.txt'
In [530]:

import pandas as pd
In [539]:

,
content = pd.read_csv(filename, encoding='utf-8',delimiter='\t')







基础理论部分
0. Can you come up out 3 sceneraies which use AI methods?
Ans: {AlphaGo, Robot-driven Vehicles and some Reservation System with AI}
1. How do we use Github; Why do we use Jupyter and Pycharm;
Ans: {We use Github as a code storage or a code cloud which everyone can share and comment. Jupyter can run python code and markdown code in the same time, so it’s clear for demonstration. However, Pycharm is a tool for real project developing. The best way we use these two tools is that Jupyter for lectures and Pycharm for practice.}
2. What's the Probability Model?
Ans: According to the probability of a word and the word next to it, calculating the probability that the whole sentence is correct
3. Can you came up with some sceneraies at which we could use Probability Model?
Ans: In speech recognition, the Probability Model would be used to identify the most correct sentence.
4. Why do we use probability and what's the difficult points for programming based on parsing and pattn match?
Ans: Because it’s hard for human or computer to obtain the best arrangement of words for a meaningful sentence in common enumeration method. Probability of words presenting can narrow down the scale of combination. The difficulty of using parsing and pattn match is similar. The grammar in human language is various and it’s hard to list them all.
5. What's the Language Model;
Ans: For every x, which x is a sentence, in function f(x), the result would be a number between 0 and 1 which means the probability of x to be a meaningful sentence.
6. Can you came up with some sceneraies at which we could use Language Model?
Ans: A Robot for communication during games
7. What's the 1-gram language model;
Ans:
8. What's the disadvantages and advantages of 1-gram language model;¶
Ans:
9. What't the 2-gram models;
Ans:


编程实践部分
# -*- coding: utf-8 -*-
import random
import sys
sys.setrecursionlimit(100000000)
question = """
问题 => 打招呼 自己 询问 业务相关 结尾
自己 => 我叫 名字 ,
名字 => 姓 名
姓 => 陈 | 李 | 张 | 王 | 黄
名 => 一 | 二 | 三 | 四 | 五
打招呼 => 你好， | 您好，
询问 => 您想 | 您是要
业务相关 => 催 报告_1 | 推荐 项目
报告_1  => 流水号为 数字 号报告
数字 => 单个数字 | 数字 单个数字
单个数字 => 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
项目 => 心脏优选 | 免疫优选 | 神经优选 | 内分泌优选
结尾 => 吗？"""

def create_grammar(grammar_str, split = "=>", line_split = "\n"):
    grammar = {}
    for line in grammar_str.split(line_split):
        if not line.strip():
            continue
        exp, stmt = line.split(split)
        grammar[exp.strip()] = [s.split() for s in stmt.split('|')]
    return grammar

def generate(gram, target):
    try:
        if target not in gram:
            return target

        expaned = [generate(gram, t) for t in random.choice(gram[target])]
        return ''.join([e for e in expaned])
    except RecursionError:
        return None

def generate_n(a, b, c):
    for i in range(c):
        print(generate(gram=a, target=b))
